# Use an Ubuntu 22.04 base image
FROM ubuntu:22.04

# Set non-interactive mode for apt-get
ENV DEBIAN_FRONTEND=noninteractive

# Set OpenCV version
ENV OPENCV_VERSION=4.10.0
ENV OPENCV_CONTRIB_URL="https://github.com/opencv/opencv_contrib.git"
ENV OPENCV_URL="https://github.com/opencv/opencv.git"

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cppcheck \
    clang-format \
    git \
    cmake \
    libjpeg-dev libjpeg8-dev libjpeg-turbo8-dev \
    libpng-dev libtiff-dev libglew-dev \
    libavcodec-dev libavformat-dev libswscale-dev \
    libgtk2.0-dev libgtk-3-dev libcanberra-gtk* \
    python3-pip \
    libxvidcore-dev libx264-dev \
    libtbb-dev libxine2-dev \
    libv4l-dev v4l-utils qv4l2 \
    libtesseract-dev libpostproc-dev \
    libvorbis-dev \
    libfaac-dev libmp3lame-dev libtheora-dev \
    libopencore-amrnb-dev libopencore-amrwb-dev \
    libopenblas-dev libatlas-base-dev libblas-dev \
    liblapack-dev liblapacke-dev libeigen3-dev gfortran \
    libhdf5-dev libprotobuf-dev protobuf-compiler \
    libgoogle-glog-dev libgflags-dev \
    wget \
    gnupg \
    ca-certificates \
    build-essential \
    unzip \
    pkg-config \
    libtbb2 \
    libdc1394-dev \
    python3-dev \
    python3-numpy \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA's package repository and install CUDA Toolkit 12.6
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin \
    && mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 \
    && wget https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda-repo-ubuntu2204-12-6-local_12.6.0-560.28.03-1_amd64.deb \
    && dpkg -i cuda-repo-ubuntu2204-12-6-local_12.6.0-560.28.03-1_amd64.deb \
    && cp /var/cuda-repo-ubuntu2204-12-6-local/cuda-*-keyring.gpg /usr/share/keyrings/ \
    && apt-get update \
    && apt-get install -y cuda-toolkit-12-6 cuda-drivers \
    && rm -f cuda-repo-ubuntu2204-12-6-local_12.6.0-560.28.03-1_amd64.deb \
    && rm -rf /var/lib/apt/lists/*

# Install cuDNN 9.3.0
RUN wget https://developer.download.nvidia.com/compute/cudnn/9.3.0/local_installers/cudnn-local-repo-ubuntu2204-9.3.0_1.0-1_amd64.deb \
    && dpkg -i cudnn-local-repo-ubuntu2204-9.3.0_1.0-1_amd64.deb \
    && cp -r /var/cudnn-local-repo-ubuntu2204-9.3.0/cudnn-*-keyring.gpg /usr/share/keyrings/ \
    && apt-get update \
    && apt-get -y install cudnn \
    && rm -f cudnn-local-repo-ubuntu2204-9.3.0_1.0-1_amd64.deb

# Install CUDA runtime development library (required for OpenCV with CUDA)
RUN apt-get install -y cuda-cudart-dev-12-6

RUN apt-get install -y --no-install-recommends \
    libnvidia-compute-535

RUN apt-get install -y --no-install-recommends \
    cuda-nvcc-12-6 \
    cuda-libraries-dev-12-6 \
    cuda-nvml-dev-12-6

RUN apt-get install -y libnvidia-encode-525

# Update the library cache (to register new libraries)
RUN ldconfig
# RUN find /usr -name "libcuda.so*"

# Set the library path to include the location of the .so files
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# Set environment variables for CUDA
ENV PATH=/usr/local/cuda-12.6/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-12.6/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH


# Clone OpenCV and OpenCV contrib
RUN git clone --branch 4.10.0 --depth 1 https://github.com/opencv/opencv.git /workspace/opencv && \
    git clone --branch 4.10.0 --depth 1 https://github.com/opencv/opencv_contrib.git /workspace/opencv_contrib && \
    mkdir -p /workspace/opencv/build && cd /workspace/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr \
          -D OPENCV_EXTRA_MODULES_PATH=/workspace/opencv_contrib/modules \
          -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
          -D WITH_OPENCL=OFF \
          -D CUDA_ARCH_BIN="8.7" \
          -D CUDA_ARCH_PTX="sm_87" \
          -D WITH_CUDA=ON \
          -D WITH_CUDNN=ON \
          -D WITH_CUBLAS=ON \
          -D ENABLE_FAST_MATH=ON \
          -D CUDA_FAST_MATH=ON \
          -D OPENCV_DNN_CUDA=ON \
          -D WITH_QT=OFF \
          -D WITH_OPENMP=ON \
          -D BUILD_TIFF=ON \
          -D WITH_FFMPEG=ON \
          -D WITH_GSTREAMER=ON \
          -D WITH_TBB=ON \
          -D BUILD_TBB=ON \
          -D BUILD_TESTS=OFF \
          -D WITH_EIGEN=ON \
          -D WITH_V4L=ON \
          -D WITH_LIBV4L=ON \
          -D WITH_PROTOBUF=ON \
          -D OPENCV_ENABLE_NONFREE=ON \
          -D INSTALL_C_EXAMPLES=OFF \
          -D INSTALL_PYTHON_EXAMPLES=OFF \
          -D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
          -D OPENCV_GENERATE_PKGCONFIG=ON \
          -D BUILD_EXAMPLES=OFF \
          -D CMAKE_CXX_FLAGS="-march=native -mtune=native" \
          -D CMAKE_C_FLAGS="-march=native -mtune=native" \
          -D WITH_TBB=OFF \
          .. > /workspace/opencv/build/cmake_output.log 2>&1 || cat /workspace/opencv/build/cmake_output.log && \
    make -j1 && make install && ldconfig && \
    rm -rf /workspace/opencv /workspace/opencv_contrib

# Download and install Google Test
RUN git clone https://github.com/google/googletest.git /googletest && \
    mkdir -p /googletest/build && \
    cd /googletest/build && \
    cmake .. && \
    make && \
    make install && \
    rm -rf /googletest

# Set the working directory
WORKDIR /workspace

# Default command
CMD ["/bin/bash"]

